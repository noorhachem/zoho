var config = require("../config");

const API_TYPE = "crm_";
const API_PREFIX = "api_prefix";
const API_VER = "api_ver";

/**
 * @class LeadManager
 * @constructor LeadManager
 * @param {Object} [dto]
 * @param {String} [dto.orgId]: targeted organization's id
 * @param {Object} [dto.client]: instance of Client
 */
function LeadManager(dto) {

    if (!dto || !dto.orgId || !dto.client) {

        throw {

            errorCode: "Missing_Parameter",
            errorDetail: "TaskManager: dto.client and dto.orgId have to be provided"
        };
    }

    this.orgId = dto.orgId;
    this.client = dto.client;
}

/**
 * @method createLeads
 * @param {Object} data: Array of lead data, such as: "Company", "Last_Name", "First_Name", "State", etc.,
 * @return {Object} lead data
 * @throws {Error}
 */
LeadManager.prototype.createLeads = function(data) {

    if (!data) {

        throw {

            errorCode: "Missing_Parameter",
            errorDetail: "LeadManager.createLeads: data has to be provided"
        };
    }

    if (!(data instanceof Array)) {
        data = [data];
    }

    var requestParams = {

        url: config[API_TYPE + API_PREFIX] + "/" +  config[API_TYPE + API_VER] + "/Leads",
        headers: {
            orgId: this.orgId
        },
        method: "POST",
        params: {data: data} // mandatory to send data through the field name "data"
    };

    return this.client.callApi(requestParams);
};

/**
 * @method listLeads
 * @param {Object} data: Array of lead data, such as: "Company", "Last_Name", "First_Name", "State", etc.,
 * @param {Object} [filters]: optional filters
 * @param {String} [filters.fields]: comma separated field names to be included. For example: Last_Name,Email
 * @param {String} [filters.sort_order]: sort in ascending ("asc") or descending ("desc") order
 * @param {String} [filters.sort_by]: field name to sort the results by
 * @param {String} [filters.converted]: set to true to filter by converted leads, set to false for non converted. Use "both" (default) for both cases
 * @param {String} [filters.approved]: set to true to filter by approved leads, set to false for non converted. Use "both" (default) for both cases
 * @param {Number} [filters.page]: index of the page to start from (defaults to 1)
 * @param {Number} [filters.per_page]: number of results per page
 * @param {Number} [filters.cvid]: number to get the list of records based on custom views (custom_view_id)
 * @return {Object} {"data": array of leads data, "info": {"per_page": total leads per page, "count": total leads, "page": returned page index, "more_records": true/false}
 * @throw {Error}
 */
LeadManager.prototype.listLeads = function(filter) {

    var requestParams = {

        url: config[API_TYPE + API_PREFIX] + "/" +  config[API_TYPE + API_VER] + "/Leads",
        headers: {
            orgId: this.orgId
        }
    };
    
    if (filter) {
        requestParams.params = filter;
    }

    return this.client.callApi(requestParams);
};

